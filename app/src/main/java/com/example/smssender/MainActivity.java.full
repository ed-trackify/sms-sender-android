package com.example.smssender;

import android.Manifest;
import android.app.Activity;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.telephony.SmsManager;
import android.telephony.TelephonyManager;
import android.telephony.PhoneStateListener;
import android.telephony.SignalStrength;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.dialog.MaterialAlertDialogBuilder;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import org.json.JSONObject;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.ArrayList;
import android.os.PowerManager;

public class MainActivity extends AppCompatActivity {
    
    private static final String TAG = "MainActivity";
    private static final int SMS_PERMISSION_CODE = 1;
    private static final int SMS_RECEIVE_PERMISSION_CODE = 2;
    private static final String PROBE_URL = "https://mex.mk/api/sms/prober.php";
    private static final long DEFAULT_PROBE_INTERVAL = 60000; // 60 seconds default
    private long probeInterval = DEFAULT_PROBE_INTERVAL;
    private static final long SMS_DELIVERY_TIMEOUT = 30000; // 30 seconds max wait for delivery
     private static final long SMS_PROCESSING_TIMEOUT = 60000; // 60 seconds max wait for processing
    
    // UI Components
    private TextInputEditText urlInput;
    private TextInputEditText intervalInput;
    private MaterialButton probeButton;
    private MaterialButton clearLogButton;
    private MaterialButton exportLogButton;
    private MaterialButton testSmsButton;
    private MaterialButton messageStatusButton;
    private TextView statusText;
    private TextView logText;
    private TextView permissionStatus;
    private View statusIndicator;
    private View permissionIndicator;
    private View networkIndicator;
    private View serviceIndicator;
    private TextView networkStatus;
    private TextView serviceStatus;
    private LinearProgressIndicator progressIndicator;
    
    // Statistics
    private TextView smsSentCount;
    private TextView smsFailedCount;
    private TextView successRate;
    private int totalSmsSent = 0;
    private int totalSmsFailed = 0;
    
    // Formatting and handlers
    private SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss", Locale.getDefault());
    private Handler handler = new Handler(Looper.getMainLooper());
    private ExecutorService executorService = Executors.newSingleThreadExecutor();
    private boolean isProbing = false;
    private Runnable probeRunnable;
    private StringBuilder activityLog = new StringBuilder();
    private SharedPreferences preferences;
    private boolean isFirstLaunch = true;
    private int currentSignalStrength = 0;
    private String networkOperator = "Unknown";
    private int retryCount = 0;
    
    // SMS Reply tracking
    private BroadcastReceiver replyReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String sender = intent.getStringExtra("sender");
            String message = intent.getStringExtra("message");
            addLog("Reply received from " + sender + ": " + message, "info");
            updateStatus("Reply received from " + sender, "ready");
        }
    };
    
    // ENHANCED: SMS Processing receiver for background service
    private BroadcastReceiver smsProcessingReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String phoneNumber = intent.getStringExtra("phone");
            String message = intent.getStringExtra("message");
            String shipmentId = intent.getStringExtra("shipment_id");
            String queueId = intent.getStringExtra("queue_id");
            
            Log.d(TAG, "SMS processing request received from background service - Shipment: " + shipmentId);
            addLog("Background SMS processing request for shipment " + shipmentId, "info");
            
            // Process the SMS on the main thread
            handler.post(new Runnable() {
                @Override
                public void run() {
                    processSmsFromBackground(phoneNumber, message, shipmentId, queueId);
                }
            });
        }
    };
    
    // SMS delivery tracking
    private static final String SMS_SENT_ACTION = "SMS_SENT";
    private static final String SMS_DELIVERED_ACTION = "SMS_DELIVERED";
    
    // Message tracking map - track each message individually
    private Map<String, MessageTracker> messageTrackers = new ConcurrentHashMap<>();
    
    // CRITICAL FIX: Message tracker class for individual SMS tracking using unique queue_id
    private static class MessageTracker {
        String uniqueSmsId;      // CRITICAL FIX: Use queue_id as unique SMS identifier
        String shipmentId;       // Keep for backward compatibility
        String phoneNumber;
        String message;
        String status;
        String errorCode;
        long sentTime;           // Unix timestamp in milliseconds
        long deliveredTime;      // Unix timestamp in milliseconds
        long deliveryTimeSeconds; // Time difference in seconds
        boolean isProcessing;
        
        // CRITICAL FIX: Initialize with unique queue_id from backend
        MessageTracker(String queueId, String phoneNumber, String message) {
            this.uniqueSmsId = queueId;      // CRITICAL: Use backend's unique queue_id
            this.shipmentId = queueId;       // Use queue_id as shipment_id for compatibility
            this.phoneNumber = phoneNumber;
            this.message = message;
            this.status = "pending";
            this.errorCode = "";
            this.sentTime = 0;
            this.deliveredTime = 0;
            this.deliveryTimeSeconds = 0;
            this.isProcessing = false;
        }
    }
    
    private BroadcastReceiver sentReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String shipmentId = intent.getStringExtra("shipment_id");
            int partIndex = intent.getIntExtra("part_index", 0);
            int totalParts = intent.getIntExtra("total_parts", 1);
            
            Log.d(TAG, "SMS sent broadcast received for shipment: " + shipmentId + " (part " + (partIndex + 1) + "/" + totalParts + ")");
            
            // CRITICAL FIX: Find tracker using shipmentId (which is now the unique SMS ID)
            MessageTracker tracker = messageTrackers.get(shipmentId);
            if (tracker == null) {
                Log.e(TAG, "CRITICAL FIX: No tracker found for unique SMS ID: " + shipmentId);
                return;
            }
            
                         if (getResultCode() == Activity.RESULT_OK) {
                 Log.d(TAG, "CRITICAL FIX: SMS accepted by phone system for shipment: " + shipmentId);
                 tracker.status = "accepted";
                 
                 // CRITICAL FIX: Send "accepted" status immediately (first real status update)
                 if (partIndex == totalParts - 1) {
                     Log.d(TAG, "CRITICAL FIX: All SMS parts accepted for shipment: " + shipmentId);
                     Log.d(TAG, "CRITICAL FIX: Sending first status update: accepted");
                     // Send first status update: accepted
                     sendResponse(tracker);
                 }
            } else {
                                 String errorCode = getErrorCode(getResultCode());
                 Log.e(TAG, "SMS sending failed for shipment " + shipmentId + " with error: " + errorCode);
                 
                 // OPTIMIZED: Only send failed status if not already delivered
                 if (!tracker.status.equals("delivered")) {
                     tracker.status = "failed";
                     tracker.errorCode = errorCode;
                     // Remove tracker immediately for failed SMS and send response
                     messageTrackers.remove(shipmentId);
                     sendResponse(tracker);
                     Log.d(TAG, "MessageTracker removed for failed shipment: " + shipmentId + " - ready for next SMS");
                 } else {
                     Log.d(TAG, "SMS " + shipmentId + " already delivered successfully, not marking as failed");
                 }
            }
        }
    };
    
    private BroadcastReceiver deliveredReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String shipmentId = intent.getStringExtra("shipment_id");
            int partIndex = intent.getIntExtra("part_index", 0);
            int totalParts = intent.getIntExtra("total_parts", 1);
            
            Log.d(TAG, "SMS delivered broadcast received for shipment: " + shipmentId + " (part " + (partIndex + 1) + "/" + totalParts + ")");
            
            // CRITICAL FIX: Find tracker using shipmentId (which is now the unique SMS ID)
            MessageTracker tracker = messageTrackers.get(shipmentId);
            if (tracker == null) {
                Log.e(TAG, "CRITICAL FIX: No tracker found for unique SMS ID: " + shipmentId);
                return;
            }
            
            if (getResultCode() == Activity.RESULT_OK) {
                // Mark the exact delivery time
                tracker.deliveredTime = System.currentTimeMillis();
                tracker.deliveryTimeSeconds = (int)((tracker.deliveredTime - tracker.sentTime) / 1000);
                
                // CRITICAL FIX: Simplified status flow - send delivered status immediately after first delivery confirmation
                if (tracker.status.equals("accepted")) {
                    // First delivery confirmation - update to "sent" status
                    tracker.status = "sent";
                    Log.d(TAG, "CRITICAL FIX: SMS confirmed sent for shipment: " + shipmentId + " at: " + tracker.deliveredTime);
                    
                    // Send "sent" status immediately
                    Log.d(TAG, "CRITICAL FIX: Sending 'sent' status update immediately");
                    sendResponse(tracker);
                    
                    // CRITICAL FIX: Send "delivered" status immediately after "sent" (no waiting for second confirmation)
                    Log.d(TAG, "CRITICAL FIX: Sending 'delivered' status immediately after 'sent'");
                    tracker.status = "delivered";
                    sendResponse(tracker);
                    
                    // If this is the last part, we can complete the tracking
                    if (partIndex == totalParts - 1) {
                        Log.d(TAG, "CRITICAL FIX: All SMS parts delivered for shipment: " + shipmentId);
                        
                        // Mark this SMS as completed using unique SMS ID to prevent reprocessing
                        SharedPreferences prefs = getSharedPreferences("SmsSenderPrefs", MODE_PRIVATE);
                        prefs.edit().putString("completed_sms_" + shipmentId, "completed").apply();
                        Log.d(TAG, "CRITICAL FIX: SMS marked as completed for unique SMS ID: " + shipmentId);
                        
                        // Remove tracker immediately after sending delivered status
                        messageTrackers.remove(shipmentId);
                        Log.d(TAG, "CRITICAL FIX: MessageTracker removed for unique SMS ID: " + shipmentId + " - ready for next SMS");
                    }
                }
            } else {
                Log.e(TAG, "SMS delivery failed for shipment " + shipmentId + " with result code: " + getResultCode());
                // Don't mark as failed yet - might be a temporary network issue
                // We'll let the timeout handle this
            }
        }
    };
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.d(TAG, "onCreate: Starting MainActivity");
        
        try {
        setContentView(R.layout.activity_main);
            Log.d(TAG, "onCreate: Layout set successfully");
            
            preferences = getSharedPreferences("SMSSenderPrefs", MODE_PRIVATE);
            isFirstLaunch = preferences.getBoolean("isFirstLaunch", true);
            
            initializeViews();
            loadSavedSettings();
            setupClickListeners();
            checkPermissions();
            registerReceivers();
            setupProbeRunnable();
            updateDeviceStatus();
            
            // Show welcome dialog on first launch
            if (isFirstLaunch) {
                showWelcomeDialog();
            } else {
                // Check for SMS receive permission after initial setup
                handler.postDelayed(() -> checkSmsReceivePermission(), 2000);
            }
            
            // Register for SMS reply broadcasts
            registerReceiver(replyReceiver, new IntentFilter("com.example.smssender.SMS_REPLY_RECEIVED"));
            
            Log.d(TAG, "onCreate: MainActivity initialized successfully");
        } catch (Exception e) {
            Log.e(TAG, "onCreate: Error initializing MainActivity", e);
            // Show a simple error message to user
            setContentView(R.layout.activity_main);
            TextView errorText = findViewById(R.id.statusText);
            if (errorText != null) {
                errorText.setText("Error initializing app: " + e.getMessage());
                errorText.setTextColor(Color.RED);
            }
        }
    }
    
    private void initializeViews() {
        try {
            Log.d(TAG, "initializeViews: Starting view initialization");
        
        urlInput = findViewById(R.id.urlInput);
            intervalInput = findViewById(R.id.intervalInput);
        probeButton = findViewById(R.id.probeButton);
            clearLogButton = findViewById(R.id.clearLogButton);
            exportLogButton = findViewById(R.id.exportLogButton);
            testSmsButton = findViewById(R.id.testSmsButton);
            messageStatusButton = findViewById(R.id.messageStatusButton);
        statusText = findViewById(R.id.statusText);
        logText = findViewById(R.id.logText);
            permissionStatus = findViewById(R.id.permissionStatus);
            statusIndicator = findViewById(R.id.statusIndicator);
            permissionIndicator = findViewById(R.id.permissionIndicator);
            progressIndicator = findViewById(R.id.progressIndicator);
            networkIndicator = findViewById(R.id.networkIndicator);
            serviceIndicator = findViewById(R.id.serviceIndicator);
            networkStatus = findViewById(R.id.networkStatus);
            serviceStatus = findViewById(R.id.serviceStatus);
            smsSentCount = findViewById(R.id.smsSentCount);
            smsFailedCount = findViewById(R.id.smsFailedCount);
            successRate = findViewById(R.id.successRate);
            
            // Set default URL
            if (urlInput != null) {
                urlInput.setText(PROBE_URL);
            }
            
            Log.d(TAG, "initializeViews: All views initialized successfully");
        } catch (Exception e) {
            Log.e(TAG, "initializeViews: Error initializing views", e);
            throw e;
        }
    }
    
    private void loadSavedSettings() {
        try {
            // Load saved probe interval
            probeInterval = preferences.getLong("probe_interval", DEFAULT_PROBE_INTERVAL);
            if (intervalInput != null) {
                intervalInput.setText(String.valueOf(probeInterval / 1000));
            }
            
            // Load saved probe URL if needed
            String savedUrl = preferences.getString("probe_url", PROBE_URL);
            if (urlInput != null && !savedUrl.equals(PROBE_URL)) {
                urlInput.setText(savedUrl);
            }
            
            Log.d(TAG, "loadSavedSettings: Settings loaded successfully");
        } catch (Exception e) {
            Log.e(TAG, "loadSavedSettings: Error loading settings", e);
        }
    }
    
    private void setupClickListeners() {
        try {
            if (probeButton != null) {
                probeButton.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if (!isProbing) {
                            startProbing();
                        } else {
                            stopProbing();
                        }
                    }
                });
            }
            
            if (clearLogButton != null) {
                clearLogButton.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        clearLog();
                    }
                });
            }
            
            if (exportLogButton != null) {
                exportLogButton.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        exportLog();
                    }
                });
            }
            
            if (testSmsButton != null) {
                testSmsButton.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        showTestSmsDialog();
                    }
                });
            }
            
            if (messageStatusButton != null) {
                messageStatusButton.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        showMessageProcessingStatus();
                    }
                });
            }
            
            Log.d(TAG, "setupClickListeners: Click listeners set up successfully");
        } catch (Exception e) {
            Log.e(TAG, "setupClickListeners: Error setting up click listeners", e);
        }
    }
    
    private void checkPermissions() {
        try {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.SEND_SMS) 
                != PackageManager.PERMISSION_GRANTED) {
                updatePermissionStatus("Permission needed", Color.RED);
            ActivityCompat.requestPermissions(this, 
                new String[]{Manifest.permission.SEND_SMS}, SMS_PERMISSION_CODE);
            } else {
                updatePermissionStatus("Granted", Color.GREEN);
            }
            Log.d(TAG, "checkPermissions: Permission check completed");
        } catch (Exception e) {
            Log.e(TAG, "checkPermissions: Error checking permissions", e);
        }
    }
    
    private void registerReceivers() {
        try {
        registerReceiver(sentReceiver, new IntentFilter(SMS_SENT_ACTION));
        registerReceiver(deliveredReceiver, new IntentFilter(SMS_DELIVERED_ACTION));
            // ENHANCED: Register SMS processing receiver
            registerReceiver(smsProcessingReceiver, new IntentFilter("com.example.smssender.PROCESS_SMS"));
            Log.d(TAG, "registerReceivers: All receivers registered successfully");
        } catch (Exception e) {
            Log.e(TAG, "registerReceivers: Error registering receivers", e);
        }
    }
    
    private void setupProbeRunnable() {
        probeRunnable = new Runnable() {
            @Override
            public void run() {
                if (isProbing) {
                    probeUrl();
                }
            }
        };
        Log.d(TAG, "setupProbeRunnable: Probe runnable set up successfully");
    }
    
    @Override
    protected void onDestroy() {
        super.onDestroy();
        Log.d(TAG, "onDestroy: Cleaning up resources");
        stopProbing();
        executorService.shutdown();
        try {
            unregisterReceiver(sentReceiver);
            unregisterReceiver(deliveredReceiver);
            unregisterReceiver(replyReceiver);
            // ENHANCED: Unregister SMS processing receiver
            unregisterReceiver(smsProcessingReceiver);
        } catch (Exception e) {
            Log.w(TAG, "onDestroy: Error unregistering receivers", e);
        }
    }
    
    private void startProbing() {
        try {
            // Read and save interval from input
            String intervalText = intervalInput != null ? intervalInput.getText().toString().trim() : "60";
            if (intervalText.isEmpty()) {
                intervalText = "60";
            }
            
            try {
                int intervalSeconds = Integer.parseInt(intervalText);
                // Validate interval (minimum 5 seconds, maximum 3600 seconds/1 hour)
                if (intervalSeconds < 5) {
                    intervalSeconds = 5;
                    intervalInput.setText("5");
                    addLog("Interval too short, set to minimum 5 seconds", "warning");
                } else if (intervalSeconds > 3600) {
                    intervalSeconds = 3600;
                    addLog("Interval too long, set to maximum 3600 seconds", "warning");
                    intervalSeconds = 3600;
                    intervalInput.setText("3600");
                }
                probeInterval = intervalSeconds * 1000L; // Convert to milliseconds
                
                // Save interval to SharedPreferences
                SharedPreferences prefs = getSharedPreferences("SMSSenderPrefs", MODE_PRIVATE);
                prefs.edit().putLong("probe_interval", probeInterval).apply();
                
                // Save probe URL to SharedPreferences
                String probeUrl = urlInput != null ? urlInput.getText().toString().trim() : PROBE_URL;
                prefs.edit().putString("probe_url", probeUrl).apply();
                
            } catch (NumberFormatException e) {
                probeInterval = DEFAULT_PROBE_INTERVAL;
                intervalInput.setText("60");
                addLog("Invalid interval, using default 60 seconds", "warning");
            }
            
        isProbing = true;
            if (probeButton != null) {
        probeButton.setText("Stop Probing");
                probeButton.setBackgroundColor(ContextCompat.getColor(this, R.color.buttonDanger));
            }
            updateStatus("Started probing every " + (probeInterval / 1000) + " seconds", "processing");
            updateStatusIndicator(Color.BLUE);
            addLog("Started automatic probing every " + (probeInterval / 1000) + " seconds", "info");
            
            // FIXED: Only start background service, not multiple probing mechanisms
            // The background service will handle all probing with the correct interval
            SmsProbeService.startService(this);
            addLog("Background service started - probing will continue even when app is minimized", "success");
            
            // FIXED: Don't start WorkManager - it conflicts with the service
            // startWorkManagerProbing();
            // addLog("WorkManager probing started - will continue even when screen is off", "success");
            
            // FIXED: Don't start local probing - it conflicts with the service
            // handler.post(probeRunnable);
            Log.d(TAG, "startProbing: Probing started successfully with interval: " + probeInterval);
        } catch (Exception e) {
            Log.e(TAG, "startProbing: Error starting probing", e);
        }
    }
    
    private void stopProbing() {
        try {
        isProbing = false;
            if (probeButton != null) {
        probeButton.setText("Start Probing");
                probeButton.setBackgroundColor(ContextCompat.getColor(this, R.color.buttonPrimary));
            }
            updateStatus("Stopped probing", "inactive");
            updateStatusIndicator(Color.GRAY);
            if (progressIndicator != null) {
                progressIndicator.setVisibility(View.GONE);
            }
            addLog("Stopped automatic probing", "info");
            
            // FIXED: Remove local probing callbacks
        handler.removeCallbacks(probeRunnable);
            
            // Stop background service
            SmsProbeService.stopService(this);
            
            // FIXED: Don't need to stop WorkManager since we're not starting it
            // stopWorkManagerProbing();
            
            Log.d(TAG, "stopProbing: Probing stopped successfully");
        } catch (Exception e) {
            Log.e(TAG, "stopProbing: Error stopping probing", e);
        }
    }
    
    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == SMS_PERMISSION_CODE) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                updatePermissionStatus("Granted", Color.GREEN);
                updateStatus("SMS permission granted", "ready");
            } else {
                updatePermissionStatus("Denied", Color.RED);
                updateStatus("SMS permission denied", "error");
            }
        } else if (requestCode == SMS_RECEIVE_PERMISSION_CODE) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                addLog("SMS receive permission granted - will track replies", "success");
                Toast.makeText(this, "SMS reply tracking enabled", Toast.LENGTH_SHORT).show();
            } else {
                addLog("SMS receive permission denied - replies won't be tracked", "warning");
            }
        }
    }
    
    private void updateStatus(final String message, final String status) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                try {
                    if (statusText != null) {
                        statusText.setText(message);
                        
                        // Update status color based on status type
                        switch (status) {
                            case "ready":
                                statusText.setTextColor(ContextCompat.getColor(MainActivity.this, R.color.statusGreen));
                                break;
                            case "processing":
                                statusText.setTextColor(ContextCompat.getColor(MainActivity.this, R.color.statusBlue));
                                break;
                            case "error":
                                statusText.setTextColor(ContextCompat.getColor(MainActivity.this, R.color.statusRed));
                                break;
                            case "inactive":
                                statusText.setTextColor(ContextCompat.getColor(MainActivity.this, R.color.statusGray));
                                break;
                        }
                    }
                } catch (Exception e) {
                    Log.e(TAG, "updateStatus: Error updating status", e);
                }
            }
        });
    }
    
    private void updateStatusIndicator(int color) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                try {
                    if (statusIndicator != null) {
                        statusIndicator.setBackgroundColor(color);
                    }
                } catch (Exception e) {
                    Log.e(TAG, "updateStatusIndicator: Error updating status indicator", e);
                }
            }
        });
    }
    
    private void updatePermissionStatus(String status, int color) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                try {
                    if (permissionStatus != null) {
                        permissionStatus.setText(status);
                    }
                    if (permissionIndicator != null) {
                        permissionIndicator.setBackgroundColor(color);
                    }
                } catch (Exception e) {
                    Log.e(TAG, "updatePermissionStatus: Error updating permission status", e);
                }
            }
        });
    }
    
    private void addLog(final String message, final String type) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                try {
                    if (logText != null) {
                String timestamp = dateFormat.format(new Date());
                String currentLog = logText.getText().toString();
                if (currentLog.equals("Logs will appear here...")) {
                    currentLog = "";
                }
                        
                        // Add color coding for different log types
                        String colorCode = "";
                        switch (type) {
                            case "success":
                                colorCode = "✓ ";
                                break;
                            case "error":
                                colorCode = "✗ ";
                                break;
                            case "warning":
                                colorCode = "⚠ ";
                                break;
                            case "info":
                            default:
                                colorCode = "ℹ ";
                                break;
                        }
                        
                        String logEntry = timestamp + " - " + colorCode + message + "\n";
                        logText.setText(currentLog + logEntry);
                        
                        // Also add to activityLog for export
                        activityLog.append(logEntry);
                    }
                } catch (Exception e) {
                    Log.e(TAG, "addLog: Error adding log message", e);
                }
            }
        });
    }
    
    private void clearLog() {
        try {
            if (logText != null) {
                logText.setText("Logs will appear here...");
            }
            addLog("Log cleared", "info");
        } catch (Exception e) {
            Log.e(TAG, "clearLog: Error clearing log", e);
        }
    }
    
    private void updateStatistics() {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                try {
                    if (smsSentCount != null) {
                        smsSentCount.setText(String.valueOf(totalSmsSent));
                    }
                    if (smsFailedCount != null) {
                        smsFailedCount.setText(String.valueOf(totalSmsFailed));
                    }
                    if (successRate != null) {
                        int total = totalSmsSent + totalSmsFailed;
                        if (total > 0) {
                            int rate = (int) ((double) totalSmsSent / total * 100);
                            successRate.setText(rate + "%");
                        } else {
                            successRate.setText("0%");
                        }
                    }
                } catch (Exception e) {
                    Log.e(TAG, "updateStatistics: Error updating statistics", e);
                }
            }
        });
    }
    
    private void scheduleNextProbe() {
        // FIXED: Background service handles all probing automatically
        // This method is kept for compatibility but doesn't interfere with service
        if (isProbing) {
            addLog("Background service will continue probing automatically", "info");
        }
    }
    
    private void probeUrl() {
        updateStatus("Probing URL...", "processing");
        if (progressIndicator != null) {
            progressIndicator.setVisibility(View.VISIBLE);
        }
        
        final String probeUrl = urlInput != null ? urlInput.getText().toString().trim() : PROBE_URL;
        
        if (probeUrl.isEmpty()) {
            addLog("Error: URL cannot be empty", "error");
            updateStatus("Invalid URL", "error");
            if (progressIndicator != null) {
                progressIndicator.setVisibility(View.GONE);
            }
            scheduleNextProbe();
            return;
        }
        
        addLog("Probing: " + probeUrl, "info");
        
        executorService.execute(new Runnable() {
            @Override
            public void run() {
                try {
                    // Support both URL parameter and HTTP header for API key
                    String fullUrl = probeUrl;
                    if (!probeUrl.contains("api_key=")) {
                        fullUrl = probeUrl + (probeUrl.contains("?") ? "&" : "?") + "api_key=osafu2379jsaf";
                    }
                    
                    URL url = new URL(fullUrl);
                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                    connection.setRequestMethod("GET");
                    connection.setConnectTimeout(10000);
                    connection.setReadTimeout(10000);
                    // Also send API key via header for compatibility
                    connection.setRequestProperty("X-API-KEY", "osafu2379jsaf");
                    
                    int responseCode = connection.getResponseCode();
                    addLog("Response Code: " + responseCode, "info");
                    
                    if (responseCode == HttpURLConnection.HTTP_OK) {
                        BufferedReader reader = new BufferedReader(
                            new InputStreamReader(connection.getInputStream()));
                        StringBuilder response = new StringBuilder();
                        String line;
                        
                        while ((line = reader.readLine()) != null) {
                            response.append(line);
                        }
                        reader.close();
                        
                        final String result = response.toString();
                        
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                handleProbeResponse(result);
                            }
                        });
                    } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {
                        addLog("Unauthorized: Invalid or missing API key", "error");
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                updateStatus("Unauthorized", "error");
                                if (progressIndicator != null) {
                                    progressIndicator.setVisibility(View.GONE);
                                }
                                scheduleNextProbe();
                            }
                        });
                    } else {
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                updateStatus("No SMS to send", "ready");
                                if (progressIndicator != null) {
                                    progressIndicator.setVisibility(View.GONE);
                                }
                                scheduleNextProbe();
                            }
                        });
                    }
                } catch (Exception e) {
                    addLog("Error: " + e.getMessage(), "error");
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            updateStatus("Probe failed", "error");
                            if (progressIndicator != null) {
                                progressIndicator.setVisibility(View.GONE);
                            }
                            scheduleNextProbe();
                        }
                    });
                }
            }
        });
    }
    
    private void handleProbeResponse(String result) {
        if (result != null && !result.trim().isEmpty()) {
            try {
                JSONObject json = new JSONObject(result);
                
                // Check for empty queue response first (as per document)
                if (json.has("status") && "empty".equals(json.getString("status"))) {
                    updateStatus("No SMS in queue", "ready");
                    addLog("Queue is empty", "info");
                    if (progressIndicator != null) {
                        progressIndicator.setVisibility(View.GONE);
                    }
                    scheduleNextProbe();
                    return;
                }
                
                // Check if JSON is empty or doesn't have required fields
                if (json.length() == 0 || !json.has("phone") || !json.has("message") || !json.has("shipment_id")) {
                    updateStatus("No SMS in queue", "ready");
                    addLog("No SMS to send - queue is empty", "info");
                    if (progressIndicator != null) {
                        progressIndicator.setVisibility(View.GONE);
                    }
                    scheduleNextProbe();
                    return;
                }
                
                String phoneNumber = json.getString("phone");
                String message = json.getString("message");
                String shipmentId = json.getString("shipment_id");
                
                // Also check for queue_id if available (as per document)
                String queueId = json.optString("queue_id", "");
                
                // Check if any required field is empty
                if (phoneNumber.isEmpty() || message.isEmpty() || shipmentId.isEmpty()) {
                    updateStatus("No SMS in queue", "ready");
                    addLog("No SMS to send - empty fields in response", "info");
                    if (progressIndicator != null) {
                        progressIndicator.setVisibility(View.GONE);
                    }
                    scheduleNextProbe();
                    return;
                }
                
                addLog("Shipment ID: " + shipmentId, "info");
                if (!queueId.isEmpty()) {
                    addLog("Queue ID: " + queueId, "info");
                }
                addLog("Phone: " + phoneNumber, "info");
                addLog("Message: " + message, "info");
                
                                                                                     // CRITICAL FIX: Check if this message is already being processed using unique SMS ID
                 String uniqueSmsId = !queueId.isEmpty() ? queueId : shipmentId;
                 if (messageTrackers.containsKey(uniqueSmsId)) {
                     addLog("CRITICAL FIX: SMS already being processed for unique SMS ID " + uniqueSmsId + " - skipping duplicate", "warning");
                     scheduleNextProbe();
                     return;
                 }
                 
                 // CRITICAL FIX: Check if this SMS was recently completed using unique SMS ID to prevent reprocessing
                 String completedSms = preferences.getString("completed_sms_" + uniqueSmsId, "");
                 if (!completedSms.isEmpty()) {
                     addLog("CRITICAL FIX: SMS already completed for unique SMS ID " + uniqueSmsId + " - skipping reprocessing", "warning");
                     scheduleNextProbe();
                     return;
                 }
                 
                 addLog("Starting SMS processing for shipment " + shipmentId, "info");
                 
                 // Store queue_id if available for status reporting
                 if (!queueId.isEmpty()) {
                     SharedPreferences prefs = getSharedPreferences("SmsSenderPrefs", MODE_PRIVATE);
                     prefs.edit().putString("queue_id", queueId).apply();
                     addLog("Queue ID stored: " + queueId, "info");
                 }
                 
                 // CRITICAL FIX: Create message tracker with unique queue_id as identifier
                 // Use queue_id as the unique SMS identifier to prevent conflicts
                 MessageTracker tracker = new MessageTracker(uniqueSmsId, phoneNumber, message);
                 messageTrackers.put(uniqueSmsId, tracker);
                
                Log.d(TAG, "CRITICAL FIX: Created tracker with unique SMS ID: " + uniqueSmsId + " for shipment: " + shipmentId);
                
                // OPTIMIZED: Skip "pending" status - backend already knows SMS is processing
                // sendResponse(tracker); // Removed redundant pending status
                
                // CRITICAL FIX: Process SMS using unique ID to prevent conflicts
                sendSMSWithTracking(phoneNumber, message, uniqueSmsId);
                
                // FIXED: Background service handles continuous probing automatically
                // No need to manually schedule next probe - service does this
            } catch (Exception e) {
                // Don't treat as error - just log and continue
                updateStatus("No SMS in queue", "ready");
                addLog("No SMS to send - " + e.getMessage(), "info");
                if (progressIndicator != null) {
                    progressIndicator.setVisibility(View.GONE);
                }
                scheduleNextProbe();
            }
        } else {
            updateStatus("No SMS in queue", "ready");
            addLog("No SMS to send - empty response", "info");
            if (progressIndicator != null) {
                progressIndicator.setVisibility(View.GONE);
            }
            scheduleNextProbe();
        }
    }
    
         private void sendSMSWithTracking(String phoneNumber, String message, String shipmentId) {
         Log.d(TAG, "Starting SMS tracking for shipment: " + shipmentId);
         
         MessageTracker tracker = messageTrackers.get(shipmentId);
         if (tracker == null) {
             Log.e(TAG, "No tracker found for shipment: " + shipmentId);
             return;
         }
         
         tracker.isProcessing = true;
         
         // CRITICAL FIX: Add timeout handler that only marks as failed if NOT delivered
         handler.postDelayed(new Runnable() {
             @Override
             public void run() {
                 MessageTracker currentTracker = messageTrackers.get(shipmentId);
                 if (currentTracker != null && currentTracker.isProcessing) {
                     // CRITICAL FIX: Only mark as failed if SMS was NOT delivered
                     if (currentTracker.status.equals("delivered")) {
                         Log.d(TAG, "CRITICAL FIX: SMS already delivered for shipment: " + shipmentId + " - skipping timeout failure");
                         // SMS was delivered successfully, remove tracker and continue
                         messageTrackers.remove(shipmentId);
                         Log.d(TAG, "MessageTracker removed for delivered SMS: " + shipmentId + " - ready for next SMS");
                     } else {
                         Log.w(TAG, "CRITICAL FIX: SMS processing timeout for shipment: " + shipmentId + " - marking as failed (not delivered)");
                         currentTracker.status = "failed";
                         currentTracker.errorCode = "timeout: processing took too long";
                         messageTrackers.remove(shipmentId);
                         sendResponse(currentTracker);
                         Log.d(TAG, "MessageTracker removed for timeout shipment: " + shipmentId + " - ready for next SMS");
                     }
                 }
             }
         }, SMS_PROCESSING_TIMEOUT);
        
        // Note: SMS processing started for shipment: " + shipmentId
        
        try {
            // Mark the exact time when SMS sending is initiated
            tracker.sentTime = System.currentTimeMillis();
            Log.d(TAG, "SMS sending initiated at: " + tracker.sentTime + " for shipment: " + shipmentId);
            
            // ENHANCED: Get SmsManager with better fallback strategy
            SmsManager smsManager = getReliableSmsManager();
                if (smsManager == null) {
                throw new Exception("Unable to get SmsManager - phone may be in restricted state");
            }
            
            // ENHANCED: Check if device is in a state that allows SMS sending
            if (!isDeviceReadyForSms()) {
                throw new Exception("Device not ready for SMS - check network and SIM state");
            }
            
            ArrayList<String> parts = smsManager.divideMessage(message);
            
            ArrayList<PendingIntent> sentIntents = new ArrayList<>();
            ArrayList<PendingIntent> deliveredIntents = new ArrayList<>();
            
                         for (int i = 0; i < parts.size(); i++) {
                 Intent sentIntent = new Intent(SMS_SENT_ACTION);
                 sentIntent.putExtra("shipment_id", shipmentId);
                 sentIntent.putExtra("part_index", i);
                 sentIntent.putExtra("total_parts", parts.size());
                 
                 Intent deliveredIntent = new Intent(SMS_DELIVERED_ACTION);
                 deliveredIntent.putExtra("shipment_id", shipmentId);
                 deliveredIntent.putExtra("part_index", i);
                 deliveredIntent.putExtra("total_parts", parts.size());
                 
                 // FIXED: Use unique request codes for each SMS to prevent conflicts
                 // Combine shipmentId hash with a unique identifier to ensure uniqueness
                 int uniqueBase = (shipmentId + "_" + System.currentTimeMillis()).hashCode();
                 PendingIntent sentPI = PendingIntent.getBroadcast(this, 
                     uniqueBase + i, sentIntent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_MUTABLE);
                 PendingIntent deliveredPI = PendingIntent.getBroadcast(this, 
                     uniqueBase + 1000 + i, deliveredIntent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_MUTABLE);
                 
                 sentIntents.add(sentPI);
                 deliveredIntents.add(deliveredPI);
             }
            
            // ENHANCED: Add retry logic for SMS sending
            boolean smsSent = false;
            int retryCount = 0;
            final int maxRetries = 3;
            
            while (!smsSent && retryCount < maxRetries) {
                try {
                    if (parts.size() == 1) {
                        smsManager.sendTextMessage(phoneNumber, null, message, sentIntents.get(0), deliveredIntents.get(0));
                    } else {
                        smsManager.sendMultipartTextMessage(phoneNumber, null, parts, sentIntents, deliveredIntents);
                    }
                    smsSent = true;
                    Log.d(TAG, "SMS sent successfully on attempt " + (retryCount + 1) + " for shipment: " + shipmentId);
                } catch (Exception e) {
                    retryCount++;
                    Log.w(TAG, "SMS send attempt " + retryCount + " failed for shipment " + shipmentId + ": " + e.getMessage());
                    
                    if (retryCount < maxRetries) {
                        // Wait before retry, increasing delay each time
                        Thread.sleep(1000 * retryCount);
                        
                        // Re-check device state before retry
                        if (!isDeviceReadyForSms()) {
                            throw new Exception("Device state changed during retry attempts");
                        }
                    } else {
                        throw e; // Re-throw if all retries failed
                    }
                }
            }
            
            if (!smsSent) {
                throw new Exception("Failed to send SMS after " + maxRetries + " attempts");
            }
            
            Log.d(TAG, "SMS sent to SmsManager for shipment: " + shipmentId);
            
        } catch (Exception e) {
            Log.e(TAG, "Exception sending SMS for shipment " + shipmentId + ": " + e.getMessage());
            tracker.status = "failed";
            tracker.errorCode = "exception: " + e.getMessage();
            // FIXED: Remove tracker immediately for exception and send response
            messageTrackers.remove(shipmentId);
            sendResponse(tracker);
            Log.d(TAG, "MessageTracker removed for exception shipment: " + shipmentId + " - ready for next SMS");
        }
    }
    
    // ENHANCED: Get reliable SmsManager with multiple fallback strategies
    private SmsManager getReliableSmsManager() {
        SmsManager smsManager = null;
        
        try {
            // Strategy 1: Try getSystemService first (Android 12+)
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                smsManager = getSystemService(SmsManager.class);
                if (smsManager != null) {
                    Log.d(TAG, "SmsManager obtained via getSystemService");
                    return smsManager;
                }
            }
            
            // Strategy 2: Try context-based approach
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                Context telephonyContext = createPackageContext(getPackageName(), 0);
                smsManager = telephonyContext.getSystemService(SmsManager.class);
                if (smsManager != null) {
                    Log.d(TAG, "SmsManager obtained via context-based approach");
                    return smsManager;
                }
            }
            
            // Strategy 3: Fallback to getDefault() (deprecated but more reliable)
            smsManager = SmsManager.getDefault();
            if (smsManager != null) {
                Log.d(TAG, "SmsManager obtained via getDefault()");
                return smsManager;
            }
            
            // Strategy 4: Try with explicit telephony service
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
                if (tm != null && tm.getSimState() == TelephonyManager.SIM_STATE_READY) {
                    smsManager = SmsManager.getDefault();
                    if (smsManager != null) {
                        Log.d(TAG, "SmsManager obtained via TelephonyManager check");
                        return smsManager;
                    }
                }
            }
            
        } catch (Exception e) {
            Log.w(TAG, "Error getting SmsManager via strategy: " + e.getMessage());
        }
        
        Log.e(TAG, "All SmsManager strategies failed");
        return null;
    }
    
    // ENHANCED: Check if device is ready for SMS operations
    private boolean isDeviceReadyForSms() {
        try {
            // Check network connectivity
            ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
            if (cm != null) {
                NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
                if (activeNetwork == null || !activeNetwork.isConnected()) {
                    Log.w(TAG, "Device not ready: No network connectivity");
                    return false;
                }
            }
            
            // Check SIM state
            TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
            if (tm != null) {
                int simState = tm.getSimState();
                if (simState != TelephonyManager.SIM_STATE_READY) {
                    Log.w(TAG, "Device not ready: SIM state is " + simState);
                    return false;
                }
                
                // Check if radio is on (only available on Android O and above)
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    try {
                        // Use reflection to check radio state safely
                        java.lang.reflect.Method isRadioOnMethod = tm.getClass().getMethod("isRadioOn");
                        Boolean radioOn = (Boolean) isRadioOnMethod.invoke(tm);
                        if (radioOn != null && !radioOn) {
                            Log.w(TAG, "Device not ready: Radio is off");
                            return false;
                        }
                    } catch (Exception e) {
                        Log.d(TAG, "Could not check radio state: " + e.getMessage());
                        // Continue without radio check
                    }
                }
            }
            
            // Check if device is in doze mode or battery optimization
            PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
            if (pm != null) {
                if (pm.isDeviceIdleMode()) {
                    Log.w(TAG, "Device not ready: Device is in idle mode");
                    return false;
                }
                
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    if (pm.isIgnoringBatteryOptimizations(getPackageName())) {
                        Log.d(TAG, "Battery optimization ignored for this app");
                    } else {
                        Log.w(TAG, "Device not ready: Battery optimization may interfere");
                        // Don't return false here, just warn
                    }
                }
            }
            
            Log.d(TAG, "Device is ready for SMS operations");
            return true;
            
        } catch (Exception e) {
            Log.e(TAG, "Error checking device readiness: " + e.getMessage());
            return false;
        }
    }
    
    // FIXED: Removed waitForDeliveryAndSendResponse method - no longer needed
    // MessageTrackers are now removed immediately when SMS is delivered or fails
    
    private void sendResponse(MessageTracker tracker) {
        if (tracker == null) {
            Log.e(TAG, "Cannot send response: tracker is null");
            return;
        }
        
        final String currentStatus = tracker.status;
        final String currentErrorCode = tracker.errorCode;
        final long currentSentTime = tracker.sentTime;
        final long currentDeliveredTime = tracker.deliveredTime;
        final long currentDeliveryTimeSeconds = tracker.deliveryTimeSeconds;
        
        Log.d(TAG, "Sending response to backend for shipment " + tracker.shipmentId + 
              " with status: " + currentStatus + 
              ", error: " + currentErrorCode + 
              ", sent: " + currentSentTime + 
              ", delivered: " + currentDeliveredTime + 
              ", delivery time: " + currentDeliveryTimeSeconds + "s");
        
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    SharedPreferences prefs = getSharedPreferences("SmsSenderPrefs", MODE_PRIVATE);
                    String queueId = prefs.getString("queue_id", "");
                    
                                         // CRITICAL FIX: Create JSON payload with unique SMS ID to prevent conflicts
                     JSONObject jsonPayload = new JSONObject();
                     jsonPayload.put("queue_id", tracker.uniqueSmsId);  // CRITICAL: Use unique SMS ID
                     jsonPayload.put("shipment_id", tracker.uniqueSmsId); // CRITICAL: Use unique SMS ID as shipment_id
                    jsonPayload.put("status", mapStatusToBackend(currentStatus));
                    jsonPayload.put("message", getStatusMessage(currentStatus, currentErrorCode));
                    jsonPayload.put("timestamp", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US).format(new Date()));
                    jsonPayload.put("phone", tracker.phoneNumber);
                    jsonPayload.put("sms_sent", tracker.message);
                    jsonPayload.put("error_code", currentErrorCode.isEmpty() ? null : currentErrorCode);
                    
                    // NEW: Enhanced timestamp fields with millisecond precision
                    if (currentSentTime > 0) {
                        jsonPayload.put("sent_timestamp", currentSentTime);
                    }
                    if (currentDeliveredTime > 0) {
                        jsonPayload.put("delivered_timestamp", currentDeliveredTime);
                    }
                    if (currentDeliveryTimeSeconds > 0) {
                        jsonPayload.put("delivery_time_seconds", currentDeliveryTimeSeconds);
                    }
                    
                    // Convert to string with proper encoding
                    String jsonString = jsonPayload.toString();
                    byte[] postData = jsonString.getBytes(StandardCharsets.UTF_8);
                    
                    // Create connection
                    String responseUrl = urlInput != null ? urlInput.getText().toString().trim() : PROBE_URL;
                    URL url = new URL(responseUrl);
                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                    connection.setRequestMethod("POST");
                    connection.setRequestProperty("Content-Type", "application/json");
                    connection.setRequestProperty("Content-Length", String.valueOf(postData.length));
                    
                    // Support both URL parameter and HTTP header for API key
                    if (responseUrl.contains("api_key=")) {
                        // API key already in URL
                    } else {
                        connection.setRequestProperty("X-API-KEY", "osafu2379jsaf");
                    }
                    
                    connection.setDoOutput(true);
                    connection.setDoInput(true);
                    
                    // Send data
                    try (OutputStream os = connection.getOutputStream()) {
                        os.write(postData);
                        os.flush();
                    }
                    
                    // Get response
                    int responseCode = connection.getResponseCode();
                    String responseMessage = connection.getResponseMessage();
                    
                    Log.d(TAG, "Status update response: " + responseCode + " - " + responseMessage);
                    
                    // Log the complete payload for debugging
                    Log.d(TAG, "Sent to backend: " + jsonString);
                    
                    connection.disconnect();
                    
                                         // Note: Response sent to backend for shipment: " + tracker.shipmentId
                    
                } catch (Exception e) {
                    Log.e(TAG, "Error sending status update to backend: " + e.getMessage());
                }
            }
        }).start();
    }
    

    
    private void showWelcomeDialog() {
        MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(this);
        builder.setTitle("Welcome to SMS Sender");
        builder.setMessage("This app automatically sends SMS messages based on backend API instructions.\n\n" +
                "Key features:\n" +
                "• Automatic SMS sending every 60 seconds\n" +
                "• Background processing (keeps running when idle)\n" +
                "• Auto-start on device boot\n" +
                "• Real-time status monitoring\n" +
                "• Delivery tracking\n" +
                "• SMS reply tracking\n" +
                "• Activity logging\n\n" +
                "Please grant SMS permission to get started.");
        builder.setPositiveButton("Get Started", (dialog, which) -> {
            preferences.edit().putBoolean("isFirstLaunch", false).apply();
            checkPermissions();
        });
        builder.setCancelable(false);
        builder.show();
    }
    
    private void checkSmsReceivePermission() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECEIVE_SMS) 
                != PackageManager.PERMISSION_GRANTED) {
            MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(this);
            builder.setTitle("Enable SMS Reply Tracking?");
            builder.setMessage("Would you like to track replies to sent SMS messages? This requires additional permission to receive SMS.");
            builder.setPositiveButton("Enable", (dialog, which) -> {
                ActivityCompat.requestPermissions(this, 
                    new String[]{Manifest.permission.RECEIVE_SMS, Manifest.permission.READ_SMS}, 
                    SMS_RECEIVE_PERMISSION_CODE);
            });
            builder.setNegativeButton("Skip", null);
            builder.show();
        }
    }
    
    private void updateDeviceStatus() {
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                // Update network status
                ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
                NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
                boolean isConnected = activeNetwork != null && activeNetwork.isConnectedOrConnecting();
                
                if (networkIndicator != null && networkStatus != null) {
                    if (isConnected) {
                        networkIndicator.setBackgroundTintList(getColorStateList(android.R.color.holo_green_dark));
                        networkStatus.setText("Connected");
                            } else {
                        networkIndicator.setBackgroundTintList(getColorStateList(android.R.color.holo_red_dark));
                        networkStatus.setText("No Connection");
                    }
                }
                
                // Update SMS service status
                TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
                boolean hasService = tm.getSimState() == TelephonyManager.SIM_STATE_READY;
                
                if (serviceIndicator != null && serviceStatus != null) {
                    if (hasService) {
                        serviceIndicator.setBackgroundTintList(getColorStateList(android.R.color.holo_green_dark));
                        serviceStatus.setText("Ready");
                    } else {
                        serviceIndicator.setBackgroundTintList(getColorStateList(android.R.color.holo_red_dark));
                        serviceStatus.setText("Not Ready");
                    }
                }
                
                // Schedule next update
                handler.postDelayed(this, 5000); // Update every 5 seconds
            }
        });
    }
    
    private void exportLog() {
        try {
            String fileName = "sms_log_" + new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(new Date()) + ".txt";
            File file = new File(getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), fileName);
            
            FileWriter writer = new FileWriter(file);
            writer.write("SMS Sender Activity Log\n");
            writer.write("========================\n\n");
            writer.write(activityLog.toString());
            writer.close();
            
            // Share the file
            Intent shareIntent = new Intent(Intent.ACTION_SEND);
            shareIntent.setType("text/plain");
            shareIntent.putExtra(Intent.EXTRA_SUBJECT, "SMS Sender Log");
            shareIntent.putExtra(Intent.EXTRA_TEXT, "Please find the SMS activity log attached.");
            
            Uri uri = FileProvider.getUriForFile(this, getPackageName() + ".fileprovider", file);
            shareIntent.putExtra(Intent.EXTRA_STREAM, uri);
            shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
            
            startActivity(Intent.createChooser(shareIntent, "Export Log"));
            
            addLog("Log exported successfully", "success");
                } catch (Exception e) {
            addLog("Failed to export log: " + e.getMessage(), "error");
            Toast.makeText(this, "Failed to export log", Toast.LENGTH_SHORT).show();
        }
    }
    
    private void showTestSmsDialog() {
        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_test_sms, null);
        
        TextInputEditText phoneInput = dialogView.findViewById(R.id.testPhoneInput);
        TextInputEditText messageInput = dialogView.findViewById(R.id.testMessageInput);
        
        MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(this);
        builder.setTitle("Send Test SMS");
        builder.setView(dialogView);
        builder.setPositiveButton("Send", (dialog, which) -> {
            String phone = phoneInput.getText().toString().trim();
            String message = messageInput.getText().toString().trim();
            
            if (phone.isEmpty() || message.isEmpty()) {
                Toast.makeText(this, "Please enter phone number and message", Toast.LENGTH_SHORT).show();
                return;
            }
            
            sendTestSms(phone, message);
        });
        builder.setNegativeButton("Cancel", null);
        builder.show();
    }
    
    private void sendTestSms(String phoneNumber, String message) {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.SEND_SMS) 
                != PackageManager.PERMISSION_GRANTED) {
            addLog("SMS permission not granted", "error");
            Toast.makeText(this, "SMS permission required", Toast.LENGTH_SHORT).show();
            return;
        }
        
        try {
            updateStatus("Sending test SMS...", "processing");
            if (progressIndicator != null) {
                progressIndicator.setVisibility(View.VISIBLE);
            }
            
            SmsManager smsManager;
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                smsManager = getSystemService(SmsManager.class);
            } else {
                smsManager = SmsManager.getDefault();
            }
            
            PendingIntent sentPI = PendingIntent.getBroadcast(this, 0, 
                new Intent(SMS_SENT_ACTION), PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);
            PendingIntent deliveredPI = PendingIntent.getBroadcast(this, 0,
                new Intent(SMS_DELIVERED_ACTION), PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);
            
            smsManager.sendTextMessage(phoneNumber, null, message, sentPI, deliveredPI);
            
            addLog("Test SMS initiated to " + phoneNumber, "info");
            
            // Update UI after a delay
            handler.postDelayed(() -> {
                if (progressIndicator != null) {
                    progressIndicator.setVisibility(View.GONE);
                }
                updateStatus("Test SMS sent", "ready");
            }, 2000);
            
        } catch (Exception e) {
            addLog("Test SMS error: " + e.getMessage(), "error");
            updateStatus("Failed to send test SMS", "error");
            if (progressIndicator != null) {
                progressIndicator.setVisibility(View.GONE);
            }
        }
    }
    
    @Override
    protected void onResume() {
        super.onResume();
        updateDeviceStatus();
        checkServiceStatus();
    }
    
    private void checkServiceStatus() {
        try {
            // Check if background service is running by checking SharedPreferences
            SharedPreferences prefs = getSharedPreferences("SMSSenderPrefs", MODE_PRIVATE);
            boolean serviceRunning = prefs.getBoolean("service_running", false);
            
            // Also check if the service is actually running in the system
            boolean isServiceRunning = isServiceRunning(SmsProbeService.class);
            
            if (serviceRunning && isServiceRunning && !isProbing) {
                // Service is running but UI shows stopped - sync UI
                isProbing = true;
                if (probeButton != null) {
                    probeButton.setText("Stop Probing");
                    probeButton.setBackgroundColor(ContextCompat.getColor(this, R.color.buttonDanger));
                }
                updateStatus("Background probing active", "processing");
                updateStatusIndicator(Color.BLUE);
                addLog("Background service detected - UI synced", "info");
            } else if ((!serviceRunning || !isServiceRunning) && isProbing) {
                // UI shows running but service stopped - sync UI
                isProbing = false;
                if (probeButton != null) {
                    probeButton.setText("Start Probing");
                    probeButton.setBackgroundColor(ContextCompat.getColor(this, R.color.buttonPrimary));
                }
                updateStatus("Probing stopped", "inactive");
                updateStatusIndicator(Color.GRAY);
                addLog("Background service stopped - UI synced", "warning");
            }
        } catch (Exception e) {
            Log.e(TAG, "checkServiceStatus: Error checking service status", e);
        }
    }
    
    private boolean isServiceRunning(Class<?> serviceClass) {
        try {
            android.app.ActivityManager manager = (android.app.ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
            for (android.app.ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {
                if (serviceClass.getName().equals(service.service.getClassName())) {
                    return true;
                }
            }
        } catch (Exception e) {
            Log.e(TAG, "Error checking if service is running", e);
        }
        return false;
    }
    
    @Override
    protected void onPause() {
        super.onPause();
        handler.removeCallbacksAndMessages(null);
    }
    
    private void startWorkManagerProbing() {
        try {
            SharedPreferences prefs = getSharedPreferences("SMSSenderPrefs", MODE_PRIVATE);
            long probeInterval = prefs.getLong("probe_interval", 60000); // 60 seconds default
            
            // Create periodic work request
            androidx.work.PeriodicWorkRequest probeWorkRequest = 
                new androidx.work.PeriodicWorkRequest.Builder(SmsProbeWorker.class, 
                    probeInterval, TimeUnit.MILLISECONDS)
                    .setInitialDelay(probeInterval, TimeUnit.MILLISECONDS)
                    .build();
            
            // Enqueue the work
            androidx.work.WorkManager.getInstance(this).enqueueUniquePeriodicWork(
                "SmsProbeWork",
                androidx.work.ExistingPeriodicWorkPolicy.REPLACE,
                probeWorkRequest
            );
            
            Log.d(TAG, "WorkManager probing started with interval: " + (probeInterval / 1000) + " seconds");
            
        } catch (Exception e) {
            Log.e(TAG, "Error starting WorkManager probing: " + e.getMessage(), e);
        }
    }
    
    private void stopWorkManagerProbing() {
        try {
            // Cancel all WorkManager work
            androidx.work.WorkManager.getInstance(this).cancelAllWork();
            Log.d(TAG, "WorkManager probing stopped");
        } catch (Exception e) {
            Log.e(TAG, "Error stopping WorkManager probing: " + e.getMessage(), e);
        }
    }
    
    // Method to show current message processing status
    private void showMessageProcessingStatus() {
        if (messageTrackers.isEmpty()) {
            addLog("No messages currently being processed", "info");
            return;
        }
        
        addLog("=== Current Message Processing Status ===", "info");
        for (Map.Entry<String, MessageTracker> entry : messageTrackers.entrySet()) {
            MessageTracker tracker = entry.getValue();
            addLog("Shipment " + tracker.shipmentId + ": " + tracker.phoneNumber + " - " + tracker.status, "info");
        }
        addLog("=======================================", "info");
    }
    
    // Method to clear all message trackers (for debugging)
    private void clearAllMessageTrackers() {
        int count = messageTrackers.size();
        messageTrackers.clear();
        addLog("Cleared " + count + " message trackers", "info");
    }
    
    // Helper method to map internal status to backend-expected status
    private String mapStatusToBackend(String internalStatus) {
        switch (internalStatus) {
            case "pending":
                return "pending";
            case "accepted":
                return "accepted"; // FIXED: Send "accepted" status to backend
            case "sent":
                return "sent";
            case "delivered":
                return "delivered";
            case "failed":
                return "failed";
            case "sent_unconfirmed": // NEW: Enhanced status
                return "sent_unconfirmed";
            case "unknown": // NEW: Enhanced status
                return "unknown";
            default:
                return "unknown";
        }
    }
    
    // OPTIMIZED: Helper method to create appropriate status messages
    private String getStatusMessage(String status, String errorCode) {
        switch (status) {
            case "pending":
                return "SMS processing initiated"; // Kept for backward compatibility
            case "accepted":
                return "SMS accepted by phone system"; // First real status update
            case "sent":
                return "SMS confirmed sent"; // Second status update
            case "delivered":
                return "SMS delivered successfully"; // Final status update
            case "failed":
                if (errorCode != null && !errorCode.isEmpty()) {
                    return "SMS failed: " + errorCode;
                }
                return "SMS failed to send";
            case "sent_unconfirmed": // Enhanced status message
                return "SMS sent but delivery not confirmed";
            case "unknown": // Enhanced status message
                return "SMS status unclear";
            default:
                return "Unknown SMS status";
        }
    }

    private String getErrorCode(int resultCode) {
        switch (resultCode) {
            case SmsManager.RESULT_ERROR_GENERIC_FAILURE:
                return "generic_failure";
            case SmsManager.RESULT_ERROR_NO_SERVICE:
                return "no_service";
            case SmsManager.RESULT_ERROR_NULL_PDU:
                return "null_pdu";
            case SmsManager.RESULT_ERROR_RADIO_OFF:
                return "radio_off";
            default:
                return "generic_failure";
        }
    }

    // ENHANCED: Process SMS from background service
    private void processSmsFromBackground(String phoneNumber, String message, String shipmentId, String queueId) {
        try {
            Log.d(TAG, "Processing SMS from background service - Shipment: " + shipmentId);
            
            // CRITICAL FIX: Use unique queue_id as identifier to prevent conflicts
            String uniqueSmsId = (queueId != null && !queueId.isEmpty()) ? queueId : shipmentId;
            
            // Check if this message is already being processed using unique ID
            if (messageTrackers.containsKey(uniqueSmsId)) {
                addLog("CRITICAL FIX: SMS already being processed for unique ID " + uniqueSmsId + " - skipping duplicate", "warning");
                return;
            }
            
            addLog("CRITICAL FIX: Starting background SMS processing for unique ID " + uniqueSmsId + " (shipment: " + shipmentId + ")", "info");
            
            // Store queue_id if available for status reporting
            if (queueId != null && !queueId.isEmpty()) {
                SharedPreferences prefs = getSharedPreferences("SmsSenderPrefs", MODE_PRIVATE);
                prefs.edit().putString("queue_id", queueId).apply();
                addLog("Queue ID stored from background: " + queueId, "info");
            }
            
            // CRITICAL FIX: Create message tracker with unique ID to prevent conflicts
            MessageTracker tracker = new MessageTracker(uniqueSmsId, phoneNumber, message);
            messageTrackers.put(uniqueSmsId, tracker);
            
            // OPTIMIZED: Skip "pending" status - backend already knows SMS is processing
            // sendResponse(tracker); // Removed redundant pending status
            
            // CRITICAL FIX: Process SMS using unique ID to prevent conflicts
            sendSMSWithTracking(phoneNumber, message, uniqueSmsId);
            
        } catch (Exception e) {
            Log.e(TAG, "Error processing SMS from background: " + e.getMessage());
            addLog("Error processing background SMS: " + e.getMessage(), "error");
        }
    }
}